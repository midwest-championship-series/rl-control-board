<!-- We should not be putting <style> here, but we are >:)  (temporarily) -->
<style>
    .twitch {
        border-radius: 10px;
    }
    #monitor-container {
        display: flex;
        flex-flow: row wrap;
        margin-left: 40px;
        margin-top: 40px;
    }
    #monitor-container .panel {
        background-color: #18181b;
    }
    #monitor-overlays > p, #monitor-scenes > p {
        color: white;
        margin-top:30px;
        width: 100%;
        text-align: center;
    }
</style>

<div id="monitor-container">
    <div class="panel-2 panel-float" style="background-color: #0000;">
        <iframe class="twitch" src="https://player.twitch.tv/?channel=mnchampionshipseries&parent=<%= process.env.DOMAIN %>&muted=true" height="610" width="1000" allowfullscreen="true"></iframe>
    </div>
    
    <div class="panel panel-float" style="background-color: #0000;">
        <iframe class="twitch" src="https://www.twitch.tv/embed/mnchampionshipseries/chat?darkpopout&parent=<%= process.env.DOMAIN %>" height="610" width="480"></iframe>
    </div>

    <!-- Fill in the rest of these with sumthin, like graphs n shiet, stats perhaps, but failure, yes failure as well -->
    <div class="panel panel-float panel-pad">
        <div>
            <!-- List of overlays and an option to deactivate -->
            <p style="color: white;font-size:24px;width:100%;text-align: center;margin-top:10px;">Connected Overlays</p>

            <div id="monitor-overlays">
                <p>No overlays connected.</p>
            </div>
        </div>
    </div>
    <div class="panel panel-float panel-pad">
        <div>
            <!-- List of scenes and transition buttons -->
            <p style="color: white;font-size:24px;width:100%;text-align: center;margin-top:10px;">Scenes</p>

            <div id="monitor-scenes">
                <p>No scenes added.</p>
            </div>
        </div>
    </div>
    <div class="panel panel-float panel-pad">
        <h4 style="width:100%;text-align: center;color:#fff;">Relay Health</h4>
        <canvas id="update-rate-out-chart"></canvas>
        <canvas id="update-rate-in-chart"></canvas>
    </div>
</div>

<script>
    function monitorDisconnect(name) {
        if(Relay.socket && Relay.socket.loggedIn)
            Relay.socket.emit("deactivate", name);
    }

    function monitorUpdateOverlays() {
        if(monitorClients.length === 0)
            document.getElementById("monitor-overlays").innerHTML = "<p>No overlays connected.</p>";
        else {
            document.getElementById("monitor-overlays").innerHTML = "";
            monitorClients.forEach((entry) => {
                let html = `
                    <div class="uk-width-1-1" style="display: flex;flex-direction: row;">
                        <span uk-icon="icon: desktop" style="color: white;align-self: center;"></span>
                        <p style="color:white;margin-left:15px;">${entry}</p>
                        <button name="${entry}" style="align-self: center;margin-left: auto;" class="uk-button uk-button-danger" onclick="monitorDisconnect(this.getAttribute('name'))">Disconnect</button>
                    </div>`;
                document.getElementById("monitor-overlays").innerHTML += html;
            });
        }
    }

    function monitorSceneUpdate(type, scene) {
        let rate = document.getElementById("monitor-transition-rate").value;
        let transition = type.includes("transition") ? true : false;
        let action = type.includes('show') ? 'show' : 'hide';

        if(Relay.socket && Relay.socket.loggedIn) {
            Relay.socket.emit(action + " scene", {
                scene: scene,
                delay: 0,
                transition: transition,
                transition_rate: rate
            });
        }
    }

    function monitorUpdateScenesView() {
        
        if(mCurScenes.length === 0)
            document.getElementById("monitor-scenes").innerHTML = "<p>No scenes added.</p>";
        else {
            let html = `
                <p style="display: inline-block;width: initial;margin-right:10px;margin-top:5px;">Transition Rate: </p>
                <input id="monitor-transition-rate" class="uk-range" oninput="document.getElementById('monitor-rate-display').innerText = this.value + 'x'" style="display: inline-block;max-width:275px;" type="range" value="1" min="0.25" max="4" step="0.25" />
                <p id="monitor-rate-display" style="display: inline-block;width:initial;margin-top:5px;">1.0x</p>
            `;
            mCurScenes.forEach((entry) => {
                html += `
                    <div class="uk-width-1-1" style="display: flex;flex-direction: row;margin-top:10px;">
                        <span uk-icon="icon: video-camera" style="color: white;align-self: center;"></span>
                        <p style="color:white;margin-left:15px;margin-top:0;margin-bottom:0;align-self:center;">${entry}</p>
                        <button name="${entry}" style="margin-left: auto;align-self: center;padding: 0px 5px;" class="uk-button uk-button-primary" onclick="monitorSceneUpdate('show_transition', this.getAttribute('name'))">T - Show</button>
                        <button name="${entry}" style="align-self: center;margin-left:5px;padding: 0px 5px;" class="uk-button uk-button-primary" onclick="monitorSceneUpdate('show', this.getAttribute('name'))">Show</button>
                        <button name="${entry}" style="align-self: center;margin-left:5px;padding: 0px 5px;" class="uk-button uk-button-primary" onclick="monitorSceneUpdate('hide_transition', this.getAttribute('name'))">T - Hide</button>
                        <button name="${entry}" style="align-self: center;margin-left:5px;padding: 0px 5px;" class="uk-button uk-button-primary" onclick="monitorSceneUpdate('hide', this.getAttribute('name'))">Hide</button>
                    </div>`;
            });
            document.getElementById("monitor-scenes").innerHTML = html;
        }
    }
    
    let mCurScenes = [];
    let monitorClients = [];
    let curRate = {"plugin": 0, "relay": 0};

    ServerManager.addListener("status_changed", (data) => {
        if(data["status"] === "INITIALIZED") {

            $.get("scenes", (data, status, xhr) => {
                mCurScenes = data.scenes;
                console.log(mCurScenes);
                monitorUpdateScenesView();
            });

            Relay.socket.on("game event", (event) => {
                console.log(event);
            })

            Relay.socket.on("update state", (match) => {
                curRate["relay"]++;
            });

            Relay.socket.on("scene added", (name) => {
                mCurScenes.push(name);
                monitorUpdateScenesView();
            });

            Relay.socket.on("scene removed", (name) => {
                mCurScenes = mCurScenes.filter(x => x !== name);
                monitorUpdateScenesView();
            });

            Relay.socket.on("overlay activated", (name) => {
                sendNotification("Overlay activated! ["+name+"]");
                monitorClients.push(name);
                monitorUpdateOverlays();
            });

            Relay.socket.on("deactivate", (name) => {
                sendNotification("Overlay deactivated. ["+name+"]");
                monitorClients = monitorClients.filter(x => x !== name);
                monitorUpdateOverlays();
            });

            Relay.socket.on("plugin heartbeat", () => {
                curRate["plugin"]++;
            });

            setInterval(() => {
                // Update graph
                if(updateRateIn && updateRateOut) {
                    let curDate = new Date();
                    updateRateOut.data.labels.push(curDate.toLocaleTimeString());
                    updateRateOut.data.datasets.forEach((dataset) => {
                        if(dataset.data.length >= 5) {
                            dataset.data.shift();
                            updateRateOut.data.labels.shift();
                        }
                        dataset.data.push(curRate["relay"]);
                    });
                    updateRateIn.data.labels.push(curDate.toLocaleTimeString());
                    updateRateIn.data.datasets.forEach((dataset) => {
                        if(dataset.data.length >= 5) {
                            updateRateIn.data.labels.shift();
                            dataset.data.shift();
                        }
                        dataset.data.push(curRate["plugin"]);
                    });
                    updateRateOut.update();
                    updateRateIn.update();
                }

                curRate["plugin"] = 0;
                curRate["relay"] = 0;
            }, 1000);
        } else if(data["status"] === "CONNECTED") {
            console.log("logged in, getting overlays");
            Relay.socket.emit("get overlays", (overlays) => {
                if(overlays.length > 0)
                    sendNotification(overlays.length + " overlay"+(overlays.length > 1 ? "s" : "")+" connected.");
                monitorClients = overlays;
                monitorUpdateOverlays();
            });
        }
    })

    let updateRateOut = undefined, updateRateIn = undefined;

    $(() => {
        updateRateOut = new Chart(document.getElementById('update-rate-out-chart'), {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: 'Update Rate Out',
                        data: [],
                        fill: false,
                        borderColor: '#f90',
                        tension: 0.1
                    }
                ]
            },
            options: {
                scales: {
                    yAxes: [{
                        display: true,
                        ticks: {
                            beginAtZero: true,
                            steps: 10,
                            stepValue: 5,
                            max: 100
                        }
                    }]
                },
                tooltips: {
                    enabled: false
                },
            }
        });
        updateRateIn = new Chart(document.getElementById('update-rate-in-chart'), {
            type: 'line',
            showTooltips: false,
            data: {
                labels: [],
                datasets: [
                    {
                        label: 'Update Rate In',
                        data: [],
                        fill: false,
                        borderColor: '#f90',
                        tension: 0.1
                    }
                ]
            },
            options: {
                scales: {
                    yAxes: [{
                        display: true,
                        ticks: {
                            beginAtZero: true,
                            steps: 10,
                            stepValue: 5,
                            max: 100
                        }
                    }]
                },
                tooltips: {
                    enabled: false
                },
            }
        });
    });
</script>