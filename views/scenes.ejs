<style>
    #scenes-container {
        display: flex;
        flex-flow: row wrap;
        margin-left: 40px;
        max-height: 220px;
    }
</style>
<p>Scenes</p>

<!-- The date is 3/4/2021. 10:21 PM. chezy had a brilliant foken idea, aight? 
    Allow the user to upload .html files to use as scenes.
    I know what you're thinking: HOLY SHIT CHEZ! that's mfin brilliant.
    Anyways, i'll probably think of a solution to implement it later,
    and by later I mean by December 2022. -->
<div id="scenes-container">
    <div class="panel-1-half panel-pad" style="height: 200px !important;min-height: 200px !important;border: 4px dashed black;">
        <div class="uk-grid-small" uk-grid>
            <h2 style="width: 100%;text-align:center;">Upload Scene</h2>
            <div id="scene-uploader" style="margin-left:20px;width: 100%;" class="uk-placeholder uk-text-center">
                <span uk-icon="icon: cloud-upload"></span>
                <span class="uk-text-middle">Drop scenes here or </span>
                <div uk-form-custom>
                    <input type="file" multiple>
                    <span class="uk-link">select one</span>
                </div>
                <span class="uk-text-middle"> (.zip, 20mb limit)</span>
            </div>
            <progress id="scene-upload-pb" class="uk-progress" value="0" max="100" hidden></progress>
        </div>
    </div>
    <div class="panel-1-half panel-pad" style="height: 200px !important;min-height: 200px !important;border: 4px dashed black;">
        <div class="uk-grid-small" uk-grid>
            <h2 style="width: 100%;text-align:center;">Remove Scene</h2>
            <select id="remove-scene-input" class="uk-select" style="width: 100%;margin-left: 10px;">
                <!-- Populate with scenes -->
                <option value="-" selected> --- Select Scene --- </option>
            </select>
            <div class="uk-width-1-1">
                <button class="uk-button uk-button-primary" style="width: 100%;margin-left: 0px;" onclick="sceneRemoveScene()">Remove Scene</button>
            </div>
        </div>
    </div>
    <div class="panel panel-pad" style="border: 4px dashed black;min-height: 0px;">
        <div class="uk-grid-small" uk-grid>
            <h2 style="width: 100%;text-align:center;">Scene Events</h2>
            <select id="update-scene-input" class="uk-select" onchange="sceneUpdateScenesVisibilityChanged(this.value !== '-')" style="width: 100%;margin-left:10px;">
                <!-- Populate with scenes -->
                <option value="-" selected> --- Select Scene --- </option>
            </select>
            <div hidden id="scene-hide-show-div" style="width: 500px;max-width:500px;margin-top:30px;">
                <p style="display: inline-block;margin-bottom:5px;">Add Show Event? </p>
                <input id="scene-show-event-check" style="display: inline-block;" class="uk-checkbox" type="checkbox" onchange="!this.checked ? document.getElementById('scene-group-show-event').setAttribute('hidden', '') : document.getElementById('scene-group-show-event').removeAttribute('hidden')" />
                <div hidden id="scene-group-show-event">
                    <select id="scene-show-event" class="uk-select"  style="display: inline-block;width: 100%;">
                        <option value="-" selected> --- Select Event --- </option>
                        <option>game:match_created</option>
                        <option>game:initialized</option>
                        <option>game:pre_countdown_begin</option>
                        <option>game:post_countdown_begin</option>
                        <option>game:goal_scored</option>
                        <option>game:replay_start</option>
                        <option>game:replay_will_end</option>
                        <option>game:replay_end</option>
                        <option>game:match_ended</option>
                        <option>game:podium_start</option>
                        <option>game:replay_created</option>
                        <option>mncs:match_ended</option>
                    </select>
                    <div class="uk-width-1-1">
                        <input id="scene-show-transition" style="display: inline-block;" class="uk-checkbox" onchange="!this.checked ? document.getElementById('scene-show-transition-rate').setAttribute('disabled', '') : document.getElementById('scene-show-transition-rate').removeAttribute('disabled')" type="checkbox" />
                        <p style="display: inline-block;">Transition?</p>
                        <input disabled id="scene-show-transition-rate" class="uk-range" oninput="document.getElementById('show-rate-display').innerText = this.value + 'x'" style="display: inline-block;max-width:300px;" type="range" value="1" min="0.25" max="4" step="0.25" />
                        <p id="show-rate-display" style="display: inline-block;">1.0x</p>
                    </div>
                    <div class="uk-width-1-1">
                        <p style="display: inline-block;">Delay (ms) </p>
                        <input id="scene-show-delay" style="max-width:360px;margin-left:5px;" type="text" class="uk-input" style="display: inline-block" value="0" placeholder="Delay" />
                    </div>
                </div>
                <div class="uk-width-1-1"></div>
                <p style="display: inline-block;margin-bottom:5px;">Add Hide Event? </p>
                <input id="scene-hide-event-check" style="display: inline-block;" class="uk-checkbox" type="checkbox" onchange="!this.checked ? document.getElementById('scene-group-hide-event').setAttribute('hidden', '') : document.getElementById('scene-group-hide-event').removeAttribute('hidden')" />
                <div hidden id="scene-group-hide-event">
                    <select id="scene-hide-event" class="uk-select"  style="display: inline-block;width: 100%;">
                        <option value="-" selected> --- Select Event --- </option>
                        <option>game:match_created</option>
                        <option>game:initialized</option>
                        <option>game:pre_countdown_begin</option>
                        <option>game:post_countdown_begin</option>
                        <option>game:goal_scored</option>
                        <option>game:replay_start</option>
                        <option>game:replay_will_end</option>
                        <option>game:replay_end</option>
                        <option>game:match_ended</option>
                        <option>game:podium_start</option>
                        <option>game:replay_created</option>
                        <option>mncs:match_ended</option>
                    </select>
                    <div class="uk-width-1-1">
                        <input id="scene-hide-transition" style="display: inline-block;" class="uk-checkbox" onchange="!this.checked ? document.getElementById('scene-hide-transition-rate').setAttribute('disabled', '') : document.getElementById('scene-hide-transition-rate').removeAttribute('disabled')" type="checkbox" />
                        <p style="display: inline-block;">Transition?</p>
                        <input disabled id="scene-hide-transition-rate" class="uk-range" oninput="document.getElementById('hide-rate-display').innerText = this.value + 'x'" style="display: inline-block;max-width:300px;" type="range" value="1" min="0.25" max="4" step="0.25" />
                        <p id="hide-rate-display" style="display: inline-block;">1.0x</p>
                    </div>
                    <div class="uk-width-1-1">
                        <p style="display: inline-block;">Delay (ms) </p>
                        <input id="scene-hide-delay" style="max-width:360px;margin-left:5px;" type="text" class="uk-input" style="display: inline-block" value="0" placeholder="Delay" />
                    </div>
                </div>
            </div>
            <div class="uk-width-1-1">
                <button class="uk-button uk-button-primary" style="width: 100%;margin-left: 0px;" onclick="sceneUpdateSceneEvents()">Update Events For Scene</button>
            </div>
        </div>
    </div>
</div>

<script>

    function sceneUpdateScenesVisibilityChanged(show) {
        if(show) {
            // Update properties?
            $("#scene-hide-show-div select").val("-");
            $("#scene-hide-show-div input[type=checkbox]").prop("checked", false);
            $("#scene-hide-show-div input[type=range]").val("1");
            $("#scene-hide-show-div input[type=text]").val("");
            $("#scene-group-hide-event").attr("hidden", "");
            $("#scene-group-show-event").attr("hidden", "");
            $("#show-rate-display").text("1.0x");
            $("#hide-rate-display").text("1.0x");
            document.getElementById('scene-hide-show-div').removeAttribute('hidden'); 
        } else 
            document.getElementById('scene-hide-show-div').setAttribute('hidden', '');
    }

    function sceneUpdateSceneEvents() {
        if(document.getElementById("update-scene-input").value !== '-') {
            let data = {
                show: {
                    event: document.getElementById("scene-show-event-check").checked ? document.getElementById("scene-show-event").value : "-",
                    transition: document.getElementById("scene-show-transition").checked,
                    transition_rate: Number(document.getElementById("scene-show-transition-rate").value),
                    delay: Number(document.getElementById("scene-show-delay").value)
                },
                hide: {
                    event: document.getElementById("scene-hide-event-check").checked ? document.getElementById("scene-hide-event").value : "-",
                    transition: document.getElementById("scene-hide-transition").checked,
                    transition_rate: Number(document.getElementById("scene-hide-transition-rate").value),
                    delay: Number(document.getElementById("scene-hide-delay").value)
                }
            };
            $.post('scenes', {
                token: getCookie("token"),
                scene: document.getElementById("update-scene-input").value,
                scene_data: JSON.stringify(data)
            }, (data, status) => {
                sendNotification("Scene updated!");
            }).fail((xhr, status, err) => {
                sendNotification(xhr.responseJSON.message);
            });
        }
    }

    let sCurScenes = [];
    function sceneRemoveScene() {
        if(document.getElementById("remove-scene-input").value !== "-")
            $.post("remove-scene", {
                token: getCookie("token"),
                scene_name: document.getElementById("remove-scene-input").value
            }, (data, status) => {
                Relay.socket.emit("scene removed", document.getElementById("remove-scene-input").value);
            }).fail((xhr, status, err) => {
                sendNotification(xhr.responseJSON.message);
            });
    }

    function sceneUpdateSceneLists() {
        document.getElementById("remove-scene-input").innerHTML = "<option value='-' selected> --- Select Scene --- </option>";
        document.getElementById("update-scene-input").innerHTML = "<option value='-' selected> --- Select Scene --- </option>";
        sCurScenes.forEach((entry) => {
            document.getElementById("remove-scene-input").innerHTML += "<option>"+entry+"</option>";
            document.getElementById("update-scene-input").innerHTML += "<option>"+entry+"</option>";
        });
    }

    ServerManager.addListener("status_changed", (data) => {
        if(data["status"] === "INITIALIZED") {
            $.get("scenes", (data, status, xhr) => {
                sCurScenes = data.scenes;
                sceneUpdateSceneLists();
            });
            Relay.socket.on("scene added", (name) => {
                sendNotification("Scene added! ("+name+")");
                sCurScenes.push(name);
                sceneUpdateSceneLists();
            });

            Relay.socket.on("scene removed", (name) => {
                sendNotification("Scene removed! ("+name+")");
                sCurScenes = sCurScenes.filter(x => x !== name);
                sceneUpdateSceneLists();
            });
        }
    });

    var scene_pb = document.getElementById('scene-upload-pb');

    // Use this thingy to upload scenes
    UIkit.upload('#scene-uploader', {
        url: '/upload-scene',
        params: {
            token: getCookie("token")
        },
        multiple: false,
        name: "scene",
        error: function() {
            setTimeout(function () {
                scene_pb.setAttribute('hidden', 'hidden');
            }, 1000);
            console.log(arguments["0"]);
            let response = arguments["0"].xhr.response;
            if(response.startsWith('{'))
                sendNotification(JSON.parse(arguments["0"].xhr.response).message);
            else
                sendNotification(response);
        },
        loadStart: function (e) {
            scene_pb.removeAttribute('hidden');
            scene_pb.max = e.total;
            scene_pb.value = e.loaded;
        },
        progress: function (e) {
            
            scene_pb.max = e.total;
            scene_pb.value = e.loaded;
        },
        loadEnd: function (e) {
            scene_pb.max = e.total;
            scene_pb.value = e.loaded;
            Relay.socket.emit("scene added", JSON.parse(e.target.response).scene);
        },
        completeAll: function () {
            setTimeout(function () {
                scene_pb.setAttribute('hidden', 'hidden');
            }, 1000);
        }
    });
</script>